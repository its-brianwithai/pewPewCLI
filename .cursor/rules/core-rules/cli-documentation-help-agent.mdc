---
description: Apply when creating or updating user-facing documentation (README, help text) for a CLI tool. Ensures comprehensive and conventional help output (`-h`/`--help`), clear usage examples, a useful README quickstart, consistency between docs and behavior, informative output standards (including color and JSON options), and helpful error messages.
globs:
alwaysApply: false
---

# CLI Documentation and Help Output

## Critical Rules

-   Implement standard help flags (`-h`, `--help`) that output usage instructions for the command and its options.
-   Use command-line parsing libraries (Commander, Yargs) to auto-generate help text based on command/option descriptions.
-   Ensure help text follows conventions: usage synopsis, description, options list, examples.
-   Include practical, real-world usage examples in help output or linked documentation.
-   Provide detailed help for subcommands if necessary (e.g., `mycli help <subcommand>`).
-   Maintain a `README.md` file with:
    -   Installation instructions.
    -   A quick usage example.
    -   A list of primary commands/options.
    -   Link to more detailed documentation if it exists.
-   Keep documentation (README, help text) consistent with the CLI's actual behavior. Update docs when code changes.
-   Design CLI output to be informative but concise by default.
-   Use color/formatting to improve readability, but respect `NO_COLOR` env var and provide a plain output mode.
-   Consider adding a `--json` flag for machine-readable output where applicable.
-   Provide clear, actionable error messages when user input is invalid (e.g., unknown command, missing argument). Include a hint on how to get help (e.g., "Use `mycli --help` for more information.").

## Examples

<example>
  **Help Output:**
  ```
  Usage: mycli init [options] <projectName>

  Initialize a new project directory.

  Options:
    -f, --force    Overwrite existing files in the directory
    -t, --template <name>  Specify project template to use (default: "default")
    -h, --help     display help for command

  Arguments:
    projectName    Name of the project and directory to create

  Examples:
    $ mycli init my-new-app
    $ mycli init --template react --force existing-app
  ```
  **README.md Snippet:**
  ```md
  ## Quick Start

  1. Install globally: `npm install -g mycli`
  2. Initialize a project: `mycli init my-project`
  3. Run the main task: `cd my-project && mycli run`

  See `mycli --help` for all commands and options.
  ```
  **Error Message:**
  ```
  Error: Missing required argument <projectName>.
  Use `mycli init --help` for more information.
  ```
</example>

<example type="invalid">
  **Help Output:** (Missing descriptions, examples, unconventional format)
  ```
  Usage: mycli init <arg1> [-f] [-t]
  Options: -f, -t
  ```
  **README.md Snippet:** (No install/usage info)
  ```md
  # MyCLI
  This is a CLI tool.
  ```
  **Error Message:** (Unhelpful)
  ```
  Error: Invalid input.
  ```
</example>