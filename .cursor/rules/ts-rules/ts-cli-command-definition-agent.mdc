---
description: Apply when defining or modifying CLI commands, subcommands, and options in a TypeScript project, particularly when using libraries like Commander.js or Yargs. Ensures use of robust parsing, POSIX-style flags, descriptive names, clear argument notation, and separation of parsing from implementation logic.
globs:
alwaysApply: false
---

# TypeScript CLI Command Definition and Parsing

## Critical Rules

-   Use a robust command-line parsing library (e.g., Commander.js, Yargs) with TypeScript support.
-   Define commands, subcommands, and options explicitly.
-   Follow POSIX-style conventions:
    -   Short flags: `-f` (single dash, single letter).
    -   Long flags: `--flag` (double dash, full word).
    -   Allow flag combination (e.g., `-abc`).
-   Use descriptive command names (verbs) for multi-command CLIs (e.g., `mycli init`, `mycli generate`).
-   Provide a one-line description for each command and option in help output.
-   Use standard argument notation in help text: `<required>` and `[optional]`.
-   Consider a default command for the primary action, or show help for unknown commands.
-   Encapsulate command implementation logic in separate functions/classes (e.g., in `src/commands/`).
-   Keep parsing logic minimal in the command definition; delegate to implementation functions.

## Examples

<example>
  ```typescript
  // Using Commander.js
  import { Command } from 'commander';
  import { handleInit } from './commands/init'; // Implementation logic separated

  const program = new Command();

  program
    .command('init <projectName>')
    .description('Initialize a new project')
    .option('-f, --force', 'Overwrite existing files')
    .action(handleInit); // Delegate to implementation

  program.parse(process.argv);
  ```
</example>

<example type="invalid">
  ```typescript
  // Anti-pattern: Logic mixed with parsing, non-standard flags
  import { Command } from 'commander';

  const program = new Command();

  program
    .command('initialize') // Less conventional verb
    .option('--projectName', 'Name of the project') // Not using <required> notation
    .option('-Force', 'Overwrite files') // Non-standard flag format
    .action((options) => {
      // Complex implementation logic directly inside .action()
      console.log(`Initializing ${options.projectName}...`);
      if (options.Force) {
        console.log('Forcing overwrite...');
      }
      // ... more logic ...
    });

  program.parse(process.argv);
  ```
</example>