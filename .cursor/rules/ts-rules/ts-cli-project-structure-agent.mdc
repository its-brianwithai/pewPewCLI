---
description: Apply when discussing or modifying the project structure of a TypeScript CLI tool. Ensures adherence to conventional layouts (bin/, src/commands/, src/utils/, src/lib/) for better navigation, scalability, and testability, especially when organizing source code, build outputs, and configuration.
globs:
alwaysApply: false
---

# TypeScript CLI Project Structure

## Critical Rules

-   Organize the project into clear, conventional directories:
    -   `bin/`: Executable script(s) with shebang.
    -   `src/`: TypeScript source code.
        -   `src/commands/`: Individual command modules.
        -   `src/utils/`: Shared utility functions.
        -   `src/lib/`: Core business logic.
    -   Root: `package.json`, `README.md`, `tsconfig.json`.
-   Compile TypeScript from `src/` to a separate output directory (e.g., `dist/`).
-   Keep compiled output (`dist/`) out of version control (add to `.gitignore`).
-   Maintain a strict TypeScript configuration (`tsconfig.json` with `strict: true`).
-   Ensure a clean separation between the CLI entry point (`bin/`) and the core logic (`src/`).

## Examples

<example>
  ```
  my-cli/
  ├── bin/
  │   └── my-cli.js       # Entry point with shebang
  ├── src/
  │   ├── commands/
  │   │   └── init.ts
  │   ├── utils/
  │   │   └── logger.ts
  │   ├── lib/
  │   │   └── api-client.ts
  │   └── index.ts        # Main application logic/setup
  ├── dist/               # Compiled JS (ignored by git)
  ├── package.json
  ├── tsconfig.json
  └── README.md
  ```
</example>

<example type="invalid">
  ```
  my-cli/
  ├── my-cli.ts           # Source and entry point mixed
  ├── commands.ts         # All commands in one file
  ├── utils.js            # Mixing JS and TS at top level
  ├── node_modules/       # Should be present, but structure lacks src/dist separation
  ├── package.json
  └── README.md
  # Missing clear separation, no dedicated bin or dist, mixes source types.
  ```
</example>