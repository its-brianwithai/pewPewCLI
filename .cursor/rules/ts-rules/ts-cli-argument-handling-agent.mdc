---
description: Apply when implementing command-line argument validation or interactive user prompts in a TypeScript CLI. Guides towards rigorous validation, clear error messages, user-friendly interactive fallbacks (e.g., using Inquirer.js) for missing inputs, sensible defaults, and support for non-interactive execution modes (e.g., in CI).
globs:
alwaysApply: false
---

# TypeScript CLI Argument Handling & Interactive Prompts

## Critical Rules

-   Rigorously validate required arguments and options. Provide clear error messages upon failure.
-   Consider prompting interactively for missing required inputs instead of just erroring out (empathic CLI).
-   Use standard libraries like Inquirer.js for interactive prompts.
-   Use appropriate prompt types (confirm, list, password) instead of free-text where possible.
-   Only prompt when necessary; prefer auto-detection or config values if available (zero-configuration).
-   Provide sensible default values for options and indicate them in help text.
-   Ensure the CLI can run non-interactively:
    -   Provide flags like `--yes` or `--non-interactive` to skip prompts.
    -   Detect CI environments (e.g., `process.env.CI`) to disable interactivity automatically.
-   Respect standard environment variables like `NO_COLOR`.
-   Time-out prompts or provide non-interactive alternatives to avoid blocking automation pipelines.

## Examples

<example>
  ```typescript
  // Using Commander and Inquirer
  import { Command } from 'commander';
  import inquirer from 'inquirer';

  async function deploy(environment: string | undefined, options: { yes: boolean }) {
    if (!environment) {
      if (options.yes || process.env.CI) {
        throw new Error('Environment name is required in non-interactive mode.');
      }
      const answers = await inquirer.prompt([{
        type: 'list',
        name: 'environment',
        message: 'Select deployment environment:',
        choices: ['staging', 'production'],
      }]);
      environment = answers.environment;
    }
    console.log(`Deploying to ${environment}...`);
    // ... deployment logic ...
  }

  const program = new Command();
  program
    .command('deploy [environment]')
    .description('Deploy the application')
    .option('-y, --yes', 'Skip interactive prompts')
    .action(deploy);

  program.parse(process.argv);
  ```
</example>

<example type="invalid">
  ```typescript
  // Anti-pattern: Always requires args, no prompts, poor errors
  import { Command } from 'commander';

  function deploy(environment: string) {
    if (!environment) {
      // Fails abruptly without guidance or interactive fallback
      console.error('Error: Missing environment argument.');
      process.exit(1);
    }
    console.log(`Deploying to ${environment}...`);
    // ... deployment logic ...
  }

  const program = new Command();
  program
    .command('deploy <environment>') // Always required via CLI arg
    .description('Deploy the application')
    // No option to skip prompts (because there are none)
    // No check for CI environment
    .action(deploy);

  program.parse(process.argv);
  ```
</example>