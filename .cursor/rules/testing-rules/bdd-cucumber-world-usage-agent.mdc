---
description: Apply this rule when writing Cucumber.js tests in TypeScript where state needs to be shared between steps within the same scenario. It guides the use of the `World` object (`this` context in steps) for storing scenario-specific data like test inputs, outputs, or intermediate results, ensuring scenario isolation.
globs: features/step_definitions/**/*.ts, features/support/world.ts
alwaysApply: false
---

# Using the Cucumber World for Shared State (TypeScript)

## Critical Rules

-   Use the `World` object (`this` context within step definitions) to share state *within* a single scenario.
-   Define a custom `World` class or interface (e.g., `ICLIWorld`) in `features/support/world.ts` to type the shared state and add helper methods if needed.
-   Register the custom World using `setWorldConstructor` in `features/support/world.ts`.
-   Store scenario-specific data (e.g., CLI command output, exit codes, generated file paths, user inputs) as properties on `this` (the World instance).
-   Access data stored in previous steps via `this` in subsequent steps (Given -> When -> Then).
-   The World is automatically reset for each new scenario, ensuring test isolation. Do not rely on state persisting across scenarios.
-   Avoid using global variables for sharing state between steps; use the World instead.

## Examples

<example>
  ```typescript
  // features/support/world.ts
  import { setWorldConstructor, World, IWorldOptions } from '@cucumber/cucumber';

  export interface ICLIWorld extends World {
    lastCommandOutput: string;
    lastExitCode: number;
    tempDir: string; // Example: path to a temporary directory for the scenario
  }

  class CLIWorld extends World implements ICLIWorld {
    public lastCommandOutput: string = '';
    public lastExitCode: number = -1;
    public tempDir: string = '';

    constructor(options: IWorldOptions) {
      super(options);
    }
  }

  setWorldConstructor(CLIWorld);
  ```
  ```typescript
  // features/step_definitions/cli.steps.ts
  import { When, Then } from '@cucumber/cucumber';
  import { ICLIWorld } from '../support/world'; // Import the interface
  import { runCliCommand } from '../support/cliRunner'; // Helper to run CLI

  When('I run the command {string}', async function (this: ICLIWorld, command: string) {
    const result = await runCliCommand(command, { cwd: this.tempDir });
    this.lastCommandOutput = result.stdout; // Store output in World
    this.lastExitCode = result.exitCode;   // Store exit code in World
  });

  Then('the exit code should be {int}', function (this: ICLIWorld, expectedCode: number) {
    expect(this.lastExitCode).to.equal(expectedCode); // Access exit code from World
  });

  Then('the output should contain {string}', function (this: ICLIWorld, expectedText: string) {
    expect(this.lastCommandOutput).to.include(expectedText); // Access output from World
  });
  ```
</example>

<example type="invalid">
  ```typescript
  // Using global variables instead of the World
  let globalOutput = ''; // Bad practice: global state

  When('I run the command {string}', async function (command: string) {
    const result = await runCliCommand(command);
    globalOutput = result.stdout; // Modifying global variable
  });

  Then('the output should contain {string}', function (expectedText: string) {
    expect(globalOutput).to.include(expectedText); // Reading from global variable
    // This can lead to test flakiness and interference between scenarios if run in parallel
  });
  ```
</example>